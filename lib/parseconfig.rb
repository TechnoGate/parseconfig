module TechnoGate
  class ParseConfig

    Version = File.exist?(File.expand_path(File.dirname(__FILE__)+"/../VERSION"))? File.read(File.expand_path(File.dirname(__FILE__)+"/../VERSION")) : ''

    attr_accessor :config_file, :params, :groups, :inheritence

    # Initialize the class with the path to the 'config_file'
    # The class objects are dynamically generated by the
    # name of the 'param' in the config file.  Therefore, if
    # the config file is 'param = value' then the itializer
    # will eval "@param = value"
    #
    def initialize(config_file=nil)
      @config_file = config_file
      @inheritence = {}
      @params = {}
      @groups = []

      if(@config_file)
        validate_config
        import_config
        setup_inheritence
      end
    end

    # Validate the config file, and contents
    def validate_config
      raise Errno::EACCES, "#{self.config_file} is not readable" unless File.readable?(self.config_file)

      # FIX ME: need to validate contents/structure?
    end

    # Import data from the config to our config object.
    def import_config
      # The config is top down.. anything after a [group] gets added as part
      # of that group until a new [group] is found.
      group = nil
      open(config_file).each do |line|
        line.strip!
        unless (/^\#/.match(line))
          if line =~ /\s*\[(.*):(.*)\]\s*/
            group = $1.strip
          parent = $2.strip
          add(group, {})
          inherit(group, parent)
          elsif line =~ /\s*\[(.*)\]\s*/
            group = $1.strip
            add(group, {})
          elsif(/\s*=\s*/.match(line))
            param, value = line.split(/\s*=\s*/, 2)
            var_name = "#{param}".chomp.strip
            value = value.chomp.strip
            new_value = ''
            if (value)
              if value =~ /^['"](.*)['"]$/
                new_value = $1
              else
                new_value = value
              end
            else
              new_value = ''
            end

            if group
              add_to_group(group, var_name, new_value)
            else
              add(var_name, new_value)
            end

          end
        end
      end
    end

    def inherit(group, parent)
      inheritence[group] = parent
    end

    def setup_inheritence
      inheritence.each do |group, parent|
        params[parent].each do |var_name, new_value|
          add_to_group(group, var_name, new_value, false)
        end
      end
    end

    # This method will provide the value held by the object "@param"
    # where "@param" is actually the name of the param in the config
    # file.
    #
    # DEPRECATED - will be removed in future versions
    #
    def get_value(param)
      return params[param]
    end

    # This method returns all parameters/groups defined in a config file.
    def get_params
      return params.keys
    end

    # List available sub-groups of the config.
    def get_groups
      return groups
    end

    # This method adds an element to the config object (not the config file)
    # By adding a Hash, you create a new group
    def add(param_name, value)
      if value.class == Hash
        if params.has_key?(param_name)
          if params[param_name].class == Hash
            params[param_name].merge!(value)
          elsif params.has_key?(param_name)
            if params[param_name].class != value.class
              raise ArgumentError, "#{param_name} already exists, and is of different type!"
            end
          end
        else
          self.params[param_name] = value
        end
        if ! self.groups.include?(param_name)
          groups.push(param_name)
        end
      else
        params[param_name] = value
      end
    end

    # Add parameters to a group. Note that parameters with the same name
    # could be placed in different groups
    def add_to_group(group, param_name, value, override = true)
      if ! groups.include?(group)
        add(group, {})
      end
      return if params[group][param_name] unless override
      self.params[group][param_name] = value
    end

    # Writes out the config file to output_stream
    def write(output_stream=STDOUT)
      params.each do |name,value|
        if value.class.to_s != 'Hash'
          if value.scan(/\w+/).length > 1
            output_stream.puts "#{name} = \"#{value}\""
          else
            output_stream.puts "#{name} = #{value}"
          end
        end
      end
      output_stream.puts "\n"

      groups.each do |group|
        output_stream.puts "[#{group}]"
        params[group].each do |param, value|
          if value.scan(/\w+/).length > 1
            output_stream.puts "#{param} = \"#{value}\""
          else
            output_stream.puts "#{param} = #{value}"
          end
        end
        output_stream.puts "\n"
      end
    end
  end
end
